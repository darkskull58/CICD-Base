resources:
  repositories:
    - repository: templates
      type: git
      name: repoA
      ref:  refs/heads/develop

variables:
- template: variables/variables.yml@templates




trigger:
- if [[ apptype: 'dotnet' ]];
  - master
- if [[ apptype: 'angular' ]];
    batch: true
    branches:
     include:
       - main
    paths:
      exclude:
        - '.gitignore'
        - '.vscode/*.*'
        - '*.md'
        - 'LICENSE'
        
pr:
- if [[ apptype: 'angular' ]];
    drafts: false
    branches:
      include:
        - main
    paths:
      exclude:
        - '.gitignore'
        - '.vscode/*.*'
        - '*.md'
        - 'LICENSE'

pool:
- if [[ apptype: 'angular' ]];
   vmImage: 'ubuntu-latest'
- if [[ apptype: 'dotnet' ]];
   vmImage: 'windows-latest' 

variables:
- if [[ apptype: 'angular' ]];
    node_version: '16.x'
    npm_config_cache: $(Pipeline.Workspace)/.npm
    is_main: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    generate_source_maps: $[lower(variables['is_main'])] # script step requires lowercase boolean, see https://stackoverflow.com/q/71729210/419956
- if [[ apptype: 'dotnet' ]];
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  
  
   
stages:
  - stage: build
    displayName: Build
    jobs:
    - job: Build
    - if [[ apptype: 'angular' ]];
        steps:
          - task: NodeTool@0
            displayName: 'Node installation'
            inputs:
              versionSpec: $(node_version)

          - pwsh: Get-ChildItem -Path Env:\
            displayName: 'Show environment variables'
            condition: false # Disabled by default

          - task: Cache@2
            displayName: 'NPM Cache'
            inputs:
              key: 'npm | "$(Agent.OS)" | "$(node_version)" | package-lock.json'
              path: $(npm_config_cache)

          - script: npm cache verify
            displayName: 'NPM Cache verification'

          - script: npm ci
            displayName: 'NPM CI'

          - script: npm run lint
            displayName: 'Angular linting'

          - script: npm run test -- --no-watch --reporters="progress,junit" --code-coverage
            displayName: 'Angular test run'

          - task: PublishTestResults@2
            displayName: 'Angular test result publication'
            inputs:
              testResultsFiles: 'TESTS-*.xml'

          - task: PublishCodeCoverageResults@1
            displayName: 'Angular test coverage publication'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/coverage/**/cobertura-coverage.xml'

          - script: npm run build -- --source-map=$(generate_source_maps)
            displayName: 'Angular build'

          - publish: '$(Build.SourcesDirectory)/dist/foo'
            displayName: 'Publish Angular application'
            artifact: AngularApp
    - if [[ apptype: 'dotnet' ]];    
        steps:
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        - task: VSBuild@1
          inputs:
            solution: '$(solution)'
            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'

        - task: VSTest@2
          inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'

